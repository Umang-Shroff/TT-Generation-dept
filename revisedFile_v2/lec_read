Sub SubStringMatchingLec(initialSheets As String)
    Dim wsSource As Worksheet
    Dim wsDestL1 As Worksheet
    Dim wsDestL2 As Worksheet
    Dim wsDestL3 As Worksheet
    Dim wsDestL4 As Worksheet
    Dim wsDestL5 As Worksheet
    Dim wsDestL6 As Worksheet
    Dim cell As Range
    Dim subject As Variant
    Dim timeValue As String
    Dim destRow As Variant
    Dim col As Long
    Dim destCol As Long
    Dim prefix As String
    Dim fullSubject As String
    Dim regex As Object
    Dim matches As Object
    Dim match As Variant
    Dim labCode As String
    Dim destCell As Range
    Dim sourceA1Value As String ' Variable to hold the value of cell A1
    Dim sheetInInitialSheets As Boolean

    ' Set the destination worksheets for each lab (with checks if the sheets exist)
    Set wsDestL1 = CheckSheetExists("64") ' Check if sheet "64" exists
    Set wsDestL2 = CheckSheetExists("65") ' Check if sheet "65" exists
    Set wsDestL3 = CheckSheetExists("66") ' Check if sheet "66" exists
    Set wsDestL4 = CheckSheetExists("53") ' Check if sheet "53" exists
    Set wsDestL5 = CheckSheetExists("54") ' Check if sheet "54" exists
    Set wsDestL6 = CheckSheetExists("55") ' Check if sheet "55" exists

    ' Initialize the regex object
    Set regex = CreateObject("VBScript.RegExp")
    regex.IgnoreCase = True
    regex.Global = True
    regex.Pattern = "(.*?)(\(\d{2}\))" ' Pattern to capture the subject and lab code (e.g., (64), (65), etc.)

    ' Loop through each worksheet in the workbook
    For Each wsSource In ThisWorkbook.Sheets
        ' Check if the current sheet's name is in the initialSheets string
        sheetInInitialSheets = InStr(1, initialSheets, wsSource.Name) > 0
        
        ' Only process sheets that are found in initialSheets
        If sheetInInitialSheets Then
            ' Get the value from A1 in the source sheet (assuming it's the same for all)
            sourceA1Value = wsSource.Range("A1").value

            ' Copy time values to destination sheets
            If Not wsDestL1 Is Nothing Then wsDestL1.Range("A1:A" & wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).row).value = wsSource.Range("A1:A" & wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).row).value
            If Not wsDestL2 Is Nothing Then wsDestL2.Range("A1:A" & wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).row).value = wsSource.Range("A1:A" & wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).row).value
            If Not wsDestL3 Is Nothing Then wsDestL3.Range("A1:A" & wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).row).value = wsSource.Range("A1:A" & wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).row).value
            If Not wsDestL4 Is Nothing Then wsDestL4.Range("A1:A" & wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).row).value = wsSource.Range("A1:A" & wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).row).value
            If Not wsDestL5 Is Nothing Then wsDestL5.Range("A1:A" & wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).row).value = wsSource.Range("A1:A" & wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).row).value
            If Not wsDestL6 Is Nothing Then wsDestL6.Range("A1:A" & wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).row).value = wsSource.Range("A1:A" & wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).row).value

            ' Loop through each row in the source worksheet
            For Each cell In wsSource.UsedRange.Rows
                ' Get the time value (the first cell in the row)
                timeValue = wsSource.Cells(cell.row, 1).value

                ' Loop through columns B to H (2 to 8)
                For col = 2 To 8 ' Columns B to H
                    ' Check if the cell in the current column is not empty
                    If wsSource.Cells(cell.row, col).value <> "" Then
                        ' Get the full content of the cell
                        fullSubject = wsSource.Cells(cell.row, col).value

                        ' Find matches using regular expression for subjects with lab codes
                        Set matches = regex.Execute(fullSubject)
                        
                        ' If a match is found
                        For Each match In matches
                            subject = Trim(match.SubMatches(0)) ' Extract the subject
                            labCode = Trim(match.SubMatches(1)) ' Extract the lab code (e.g., (64), (65), etc.)
                            
                            ' Normalize the format for the lab code (e.g., remove space before parentheses)
                            fullSubject = subject & labCode

                            ' Prepend the value from A1 in brackets to the full subject
                            fullSubject = "(" & sourceA1Value & ") " & fullSubject

                            ' Determine the destination row for each lab code
                            Select Case labCode
                                Case "(64)"
                                    If Not wsDestL1 Is Nothing Then
                                        destRow = Application.match(timeValue, wsDestL1.Columns(1), 0)
                                        If Not IsError(destRow) Then
                                            Set destCell = wsDestL1.Cells(destRow, col)
                                            destCell.value = "'" & fullSubject ' Preserve format with apostrophe
                                            ApplyBlackBorders destCell ' Apply black borders
                                            AutoFitCell destCell ' Auto-fit the cell
                                        End If
                                    End If
                                Case "(65)"
                                    If Not wsDestL2 Is Nothing Then
                                        destRow = Application.match(timeValue, wsDestL2.Columns(1), 0)
                                        If Not IsError(destRow) Then
                                            Set destCell = wsDestL2.Cells(destRow, col)
                                            destCell.value = "'" & fullSubject ' Preserve format with apostrophe
                                            ApplyBlackBorders destCell ' Apply black borders
                                            AutoFitCell destCell ' Auto-fit the cell
                                        End If
                                    End If
                                Case "(66)"
                                    If Not wsDestL3 Is Nothing Then
                                        destRow = Application.match(timeValue, wsDestL3.Columns(1), 0)
                                        If Not IsError(destRow) Then
                                            Set destCell = wsDestL3.Cells(destRow, col)
                                            destCell.value = "'" & fullSubject ' Preserve format with apostrophe
                                            ApplyBlackBorders destCell ' Apply black borders
                                            AutoFitCell destCell ' Auto-fit the cell
                                        End If
                                    End If
                                Case "(53)"
                                    If Not wsDestL4 Is Nothing Then
                                        destRow = Application.match(timeValue, wsDestL4.Columns(1), 0)
                                        If Not IsError(destRow) Then
                                            Set destCell = wsDestL4.Cells(destRow, col)
                                            destCell.value = "'" & fullSubject ' Preserve format with apostrophe
                                            ApplyBlackBorders destCell ' Apply black borders
                                            AutoFitCell destCell ' Auto-fit the cell
                                        End If
                                    End If
                                Case "(54)"
                                    If Not wsDestL5 Is Nothing Then
                                        destRow = Application.match(timeValue, wsDestL5.Columns(1), 0)
                                        If Not IsError(destRow) Then
                                            Set destCell = wsDestL5.Cells(destRow, col)
                                            destCell.value = "'" & fullSubject ' Preserve format with apostrophe
                                            ApplyBlackBorders destCell ' Apply black borders
                                            AutoFitCell destCell ' Auto-fit the cell
                                        End If
                                    End If
                                Case "(55)"
                                    If Not wsDestL6 Is Nothing Then
                                        destRow = Application.match(timeValue, wsDestL6.Columns(1), 0)
                                        If Not IsError(destRow) Then
                                            Set destCell = wsDestL6.Cells(destRow, col)
                                            destCell.value = "'" & fullSubject ' Preserve format with apostrophe
                                            ApplyBlackBorders destCell ' Apply black borders
                                            AutoFitCell destCell ' Auto-fit the cell
                                        End If
                                    End If
                            End Select
                        Next match
                    End If
                Next col
            Next cell
        End If
    Next wsSource

    MsgBox "Subjects have been added to their respective lab sheets based on time."
End Sub

' Function to check if a sheet exists and return it, else return Nothing
Function CheckSheetExists(sheetName As String) As Worksheet
    On Error Resume Next
    Set CheckSheetExists = ThisWorkbook.Sheets(sheetName)
    On Error GoTo 0
End Function

' Subroutine to apply black borders to a cell
Sub ApplyBlackBorders(ByVal destCell As Range)
    With destCell.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = vbBlack
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With destCell.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Color = vbBlack
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With destCell.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Color = vbBlack
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With destCell.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Color = vbBlack
        .TintAndShade = 0
        .Weight = xlThin
    End With
End Sub

' Subroutine to auto-fit a cell based on its content
Sub AutoFitCell(ByVal destCell As Range)
    ' Auto-fit column width to match the content
    destCell.EntireColumn.AutoFit
    ' Auto-fit row height to match the content
    destCell.EntireRow.AutoFit
End Sub

