Sub createSheetsFromUniqueValues()
    Dim wsSource As Worksheet
    Dim cell As Range
    Dim regex As Object
    Dim matchCollection As Object
    Dim match As Variant
    Dim uniqueValues As Collection
    Dim value As Variant
    Dim newSheet As Worksheet
    Dim sheetName As String
    Dim lastRow As Long
    Dim lastCol As Long
    Dim excludedValues As Variant
    Dim ws As Worksheet
    Dim sourceWs As Worksheet ' Variable to store the source worksheet
    
    ' Array of values to exclude from sheet creation
    excludedValues = Array("53", "54", "55", "L1", "L2", "L3", "64", "65", "66", "T")
    
    ' Create a collection to hold unique values
    Set uniqueValues = New Collection
    
    ' Create a regular expression object for pattern matching
    Set regex = CreateObject("VBScript.RegExp")
    regex.IgnoreCase = True
    regex.Global = True
    regex.Pattern = "\(([^)]+)\)" ' This will match text inside brackets
    
    ' Loop through all sheets in the workbook
    For Each ws In ThisWorkbook.Sheets
        ' Skip the sheets that are in the excluded list
        If IsError(Application.match(ws.Name, excludedValues, 0)) Then
            ' Store the source worksheet
            Set sourceWs = ws
            
            ' Loop through each cell in the current sheet to gather unique values
            For Each cell In ws.UsedRange
                If cell.HasFormula = False Then ' Skip cells with formulas
                    ' Apply regex to find matches in the cell content
                    Set matchCollection = regex.Execute(cell.value)
                    ' Loop through each match found
                    For Each match In matchCollection
                        ' Add the matched string to the uniqueValues collection if not already present
                        On Error Resume Next ' Ignore error if the value already exists
                        uniqueValues.Add match.SubMatches(0), CStr(match.SubMatches(0))
                        On Error GoTo 0 ' Reset error handling
                    Next match
                End If
            Next cell
        End If
    Next ws
    
    ' Create a new sheet for each unique value found (excluding the excluded values)
    For Each value In uniqueValues
        sheetName = value
        
        ' Skip creating sheets for the excluded values
        If IsError(Application.match(sheetName, excludedValues, 0)) Then
            ' Check if the sheet already exists
            On Error Resume Next
            Set newSheet = Nothing
            Set newSheet = ThisWorkbook.Sheets(sheetName)
            On Error GoTo 0
            
            ' If the sheet doesn't exist, create a new one
            If newSheet Is Nothing Then
                Set newSheet = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
                newSheet.Name = sheetName
                
                ' Use the previously stored sourceWs for the correct worksheet
                lastRow = sourceWs.Cells(sourceWs.Rows.Count, 1).End(xlUp).Row
                lastCol = sourceWs.Cells(1, sourceWs.Columns.Count).End(xlToLeft).Column
                
                ' Only copy column A and row 1 (excluding cell A1)
                sourceWs.Range("A1:A" & lastRow).Copy newSheet.Range("A1")
                sourceWs.Rows(1).Copy
                newSheet.Rows(1).PasteSpecial Paste:=xlPasteValues
                newSheet.Cells(1, 1).ClearContents ' Clear content in A1 of the new sheet
                
                ' Autofit columns
                newSheet.Columns.AutoFit
                
                ' Apply borders to column A and row 1
                newSheet.Range("A1:A" & lastRow).Borders.LineStyle = xlContinuous ' Borders for column A
                newSheet.Range("A1:" & newSheet.Cells(1, lastCol).Address).Borders.LineStyle = xlContinuous ' Borders for row 1
            End If
            
            ' Reset the reference for the next loop
            Set newSheet = Nothing
        End If
    Next value
    
    MsgBox "Sheets have been created based on unique values."
End Sub

