Sub createSheetsFromUniqueValues(initialSheets As String)
    Dim wsSource As Worksheet
    Dim cell As Range
    Dim regex As Object
    Dim matchCollection As Object
    Dim match As Variant
    Dim uniqueValues As Collection
    Dim value As Variant
    Dim newSheet As Worksheet
    Dim sheetName As String
    Dim ws As Worksheet
    Dim initialSheetNames() As String
    Dim matchValue As String
    
    ' Split the initialSheets string into an array of sheet names
    initialSheetNames = Split(initialSheets, vbCrLf)
    
    ' Create a collection to hold unique values
    Set uniqueValues = New Collection
    
    ' Create a regular expression object for pattern matching
    Set regex = CreateObject("VBScript.RegExp")
    regex.IgnoreCase = True
    regex.Global = True
    regex.Pattern = "\(([^)]+)\)" ' This will match text inside brackets
    
    ' Loop through all sheets in the workbook that are listed in initialSheets
    For Each ws In ThisWorkbook.sheets
        ' Process only the sheets whose names are in initialSheets
        If IsInArray(ws.Name, initialSheetNames) Then
            ' Store the source worksheet
            Set wsSource = ws
            
            ' Loop through each cell in the current sheet to gather unique values inside parentheses
            For Each cell In ws.UsedRange
                If cell.HasFormula = False Then ' Skip cells with formulas
                    ' Apply regex to find matches in the cell content
                    Set matchCollection = regex.Execute(cell.value)
                    
                    ' Loop through each match found
                    For Each match In matchCollection
                        ' Get the matched string inside brackets
                        matchValue = match.Submatches(0)
                        
                        ' Check if the match is purely non-numeric (i.e., it contains only letters and no digits)
                        ' Also, ignore the value "T"
                        If Not ContainsDigits(matchValue) And matchValue <> "T" Then
                            ' Add the matched string to the uniqueValues collection if not already present
                            On Error Resume Next ' Ignore error if the value already exists
                            uniqueValues.Add matchValue, CStr(matchValue)
                            On Error GoTo 0 ' Reset error handling
                        End If
                    Next match
                End If
            Next cell
        End If
    Next ws
    
    ' Create a new sheet for each unique value found
    For Each value In uniqueValues
        sheetName = value
        
        ' Check if the sheet already exists
        On Error Resume Next
        Set newSheet = Nothing
        Set newSheet = ThisWorkbook.sheets(sheetName)
        On Error GoTo 0
        
        ' If the sheet doesn't exist, create a new one
        If newSheet Is Nothing Then
            ' Create the new sheet
            Set newSheet = ThisWorkbook.sheets.Add(After:=ThisWorkbook.sheets(ThisWorkbook.sheets.Count))
            newSheet.Name = sheetName
        End If
        
        ' Reset the reference for the next loop
        Set newSheet = Nothing
    Next value
    
    MsgBox "Sheets have been created based on unique non-numeric values."
End Sub

' Helper function to check if a sheet name is in the initialSheets list
Function IsInArray(value As String, arr As Variant) As Boolean
    Dim element As Variant
    IsInArray = False
    For Each element In arr
        If element = value Then
            IsInArray = True
            Exit Function
        End If
    Next element
End Function

' Helper function to check if a string contains any digits
Function ContainsDigits(str As String) As Boolean
    Dim i As Integer
    ContainsDigits = False
    For i = 1 To Len(str)
        If Mid(str, i, 1) Like "[0-9]" Then
            ContainsDigits = True
            Exit Function
        End If
    Next i
End Function

